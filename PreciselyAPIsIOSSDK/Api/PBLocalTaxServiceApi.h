#import <Foundation/Foundation.h>
#import "PBErrorInfo.h"
#import "PBIPDTaxByAddressBatchRequest.h"
#import "PBTaxAddressRequest.h"
#import "PBTaxDistrictResponse.h"
#import "PBTaxDistrictResponseList.h"
#import "PBTaxLocationRequest.h"
#import "PBTaxRateAddressRequest.h"
#import "PBTaxRateLocationRequest.h"
#import "PBTaxRateResponse.h"
#import "PBTaxResponses.h"
#import "PBApi.h"

/**
* Precisely APIs
* Enhance & enrich your data, applications, business processes, and workflows with rich location, information, and identify APIs.
*
* The version of the OpenAPI document: 14.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/



@interface PBLocalTaxServiceApi: NSObject <PBApi>

extern NSString* kPBLocalTaxServiceApiErrorDomain;
extern NSInteger kPBLocalTaxServiceApiMissingParamErrorCode;

-(instancetype) initWithApiClient:(PBApiClient *)apiClient NS_DESIGNATED_INITIALIZER;

/// Post Tax By Address
/// This is a Batch offering for 'Tax By Address' service. It accepts a single address, purchase amount or a list of addresses, purchase amounts and retrieve applicable taxes.
///
/// @param taxRateTypeId 
/// @param taxAddressRequest 
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:500 message:"Internal Server Error"
///
/// @return PBTaxResponses*
-(NSURLSessionTask*) getBatchTaxByAddressWithTaxRateTypeId: (NSString*) taxRateTypeId
    taxAddressRequest: (PBTaxAddressRequest*) taxAddressRequest
    completionHandler: (void (^)(PBTaxResponses* output, NSError* error)) handler;


/// Post Tax By Location
/// This is a Batch offering for 'Tax By Location' service. It accepts a single location coordinate, purchase amount or a list of location coordinates, purchase amounts and retrieve applicable tax.
///
/// @param taxRateTypeId 
/// @param taxLocationRequest 
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:500 message:"Internal Server Error"
///
/// @return PBTaxResponses*
-(NSURLSessionTask*) getBatchTaxByLocationWithTaxRateTypeId: (NSString*) taxRateTypeId
    taxLocationRequest: (PBTaxLocationRequest*) taxLocationRequest
    completionHandler: (void (^)(PBTaxResponses* output, NSError* error)) handler;


/// Post Taxrate By Address
/// This is a Batch offering for 'Taxrate By Address' service. It accepts a single address or a list of addresses and retrieve applicable tax rates.
///
/// @param taxRateTypeId 
/// @param taxRateAddressRequest 
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:500 message:"Internal Server Error"
///
/// @return PBTaxResponses*
-(NSURLSessionTask*) getBatchTaxRateByAddressWithTaxRateTypeId: (NSString*) taxRateTypeId
    taxRateAddressRequest: (PBTaxRateAddressRequest*) taxRateAddressRequest
    completionHandler: (void (^)(PBTaxResponses* output, NSError* error)) handler;


/// Post Taxrate By Location
/// This is a Batch offering for 'Taxrate By Location' service. It accepts a single location coordinate or a list of location coordinates and retrieve applicable tax rates.
///
/// @param taxRateTypeId 
/// @param taxRateLocationRequest 
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:500 message:"Internal Server Error"
///
/// @return PBTaxResponses*
-(NSURLSessionTask*) getBatchTaxRateByLocationWithTaxRateTypeId: (NSString*) taxRateTypeId
    taxRateLocationRequest: (PBTaxRateLocationRequest*) taxRateLocationRequest
    completionHandler: (void (^)(PBTaxResponses* output, NSError* error)) handler;


/// Get IPD Tax by Address
/// Retrieves IPD (Insurance Premium District) tax rates applicable to a specific address. This service accepts address as input and returns one or many IPD tax rate details for that region in which address falls.
///
/// @param address The address to be searched.
/// @param returnLatLongFields Y or N (default is N) - Returns Latitude Longitude Fields. (optional)
/// @param latLongFormat (default is Decimal) - Returns Desired Latitude Longitude Format. (optional)
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:500 message:"Internal Server Error"
///
/// @return PBTaxDistrictResponse*
-(NSURLSessionTask*) getIPDTaxByAddressWithAddress: (NSString*) address
    returnLatLongFields: (NSString*) returnLatLongFields
    latLongFormat: (NSString*) latLongFormat
    completionHandler: (void (^)(PBTaxDistrictResponse* output, NSError* error)) handler;


/// Get IPD Tax for batch requests.
/// This is a Batch offering for 'IPD Tax rates By Address'. It accepts multiple addresses as parameters along with geocoding and matching preferences and returns one or many IPD tax rate details for each address.
///
/// @param iPDTaxByAddressBatchRequest 
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:500 message:"Internal Server Error"
///
/// @return PBTaxDistrictResponseList*
-(NSURLSessionTask*) getIPDTaxByAddressBatchWithIPDTaxByAddressBatchRequest: (PBIPDTaxByAddressBatchRequest*) iPDTaxByAddressBatchRequest
    completionHandler: (void (^)(PBTaxDistrictResponseList* output, NSError* error)) handler;


/// Get Tax By Address
/// This service calculates and returns taxes applicable at a specific address. Address, purchase amount and supported tax rate type are inputs to the service.
///
/// @param taxRateTypeId The tax rate id
/// @param address The address to be searched.
/// @param purchaseAmount The amount on which tax to be calculated
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:500 message:"Internal Server Error"
///
/// @return PBTaxRateResponse*
-(NSURLSessionTask*) getSpecificTaxByAddressWithTaxRateTypeId: (NSString*) taxRateTypeId
    address: (NSString*) address
    purchaseAmount: (NSString*) purchaseAmount
    completionHandler: (void (^)(PBTaxRateResponse* output, NSError* error)) handler;


/// Get Tax By Location
/// This service calculates and returns tax applicable at a specific location. Longitude, latitude, purchase amount and supported tax rate type are inputs to the service.
///
/// @param taxRateTypeId The tax rate id
/// @param latitude Latitude of the location
/// @param longitude Longitude of the location
/// @param purchaseAmount The amount on which tax to be calculated
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:500 message:"Internal Server Error"
///
/// @return PBTaxRateResponse*
-(NSURLSessionTask*) getSpecificTaxByLocationWithTaxRateTypeId: (NSString*) taxRateTypeId
    latitude: (NSString*) latitude
    longitude: (NSString*) longitude
    purchaseAmount: (NSString*) purchaseAmount
    completionHandler: (void (^)(PBTaxRateResponse* output, NSError* error)) handler;


/// Get Taxrate By Address
/// Retrieves tax rates applicable to a specific address. This service accepts address and supported tax rate type as inputs to retrieve applicable tax rates.
///
/// @param taxRateTypeId The tax rate id
/// @param address The address to be searched.
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:500 message:"Internal Server Error"
///
/// @return PBTaxRateResponse*
-(NSURLSessionTask*) getSpecificTaxRateByAddressWithTaxRateTypeId: (NSString*) taxRateTypeId
    address: (NSString*) address
    completionHandler: (void (^)(PBTaxRateResponse* output, NSError* error)) handler;


/// Get Taxrate By Location
/// Retrieves tax rates applicable to a specific location. This service accepts longitude, latitude and supported tax rate type as inputs to retrieve applicable tax rates.
///
/// @param taxRateTypeId The tax rate id
/// @param latitude Latitude of the location
/// @param longitude Longitude of the location
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:500 message:"Internal Server Error"
///
/// @return PBTaxRateResponse*
-(NSURLSessionTask*) getSpecificTaxRateByLocationWithTaxRateTypeId: (NSString*) taxRateTypeId
    latitude: (NSString*) latitude
    longitude: (NSString*) longitude
    completionHandler: (void (^)(PBTaxRateResponse* output, NSError* error)) handler;



@end
